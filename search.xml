<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/post/HelloWorld/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>杂物间</category>
      </categories>
  </entry>
  <entry>
    <title>对Linux的第一次尝试</title>
    <url>/post/tryLinux/</url>
    <content><![CDATA[<blockquote>
<p>电脑上的VMware在大一入学前就安装好了，一直在硬盘里吃灰。想着大二前怎么也要用一用，于是抓住假期的尾巴，浅玩了一下linux</p>
</blockquote>
<h2 id="linux的安装"><a href="#linux的安装" class="headerlink" title="linux的安装"></a>linux的安装</h2><p>跟着这个教程成功于VMware上安装上了centos7</p>
<p><a href="https://blog.csdn.net/weixin_52799373/article/details/124324077">VMware虚拟机安装Linux教程(超详细)_vmware安装linux虚拟机_七维大脑的博客-CSDN博客</a></p>
<p>然后隔天早上网络还出了点问题，跟着这篇教程修复了</p>
<p><a href="https://blog.csdn.net/m0_55710969/article/details/121331849">Linux [Error]错误：激活连接失败：No suitable device found for this connection.无网络图标【已解决】_hah杨大仙的博客-CSDN博客</a></p>
<h2 id="工具的安装"><a href="#工具的安装" class="headerlink" title="工具的安装"></a>工具的安装</h2><h3 id="yum"><a href="#yum" class="headerlink" title="yum"></a>yum</h3><p><a href="https://blog.csdn.net/weixin_44657888/article/details/117200381">linux如何安装yum_linux安装yum命令步骤_一个懒鬼的博客-CSDN博客</a></p>
<p>yum的安装比较容易，跟着上面这个教程走，没出一点问题</p>
<h3 id="curl"><a href="#curl" class="headerlink" title="curl"></a>curl</h3><p><a href="https://blog.csdn.net/qq_38215042/article/details/108768839">Linux安装curl完整步骤_linux 安装 curl_itfallrain的博客-CSDN博客</a></p>
<p>curl的安装麻烦了很多，即使是跟着上面这个教程走，但还是出了很多问题</p>
<ul>
<li>报错无c的编译器：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#于是安装</span></span><br><span class="line">yum groupinstall <span class="string">&quot;Development Tools&quot;</span> </span><br></pre></td></tr></table></figure>

<ul>
<li>报错**<code>configure: error: select TLS backend(s) or disable TLS with --without-ssl.</code>**</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#经搜索得知,这个错误是由于在安装curl时没有指定TLS后端的原因。</span></span><br><span class="line"><span class="comment">#TLS是一种用于保护网络通信的协议，它需要一些库来支持，</span></span><br><span class="line"><span class="comment">#例如OpenSSL、wolfSSL等。</span></span><br><span class="line"><span class="comment">#如果没有安装这些库，或者没有告诉curl使用哪个库，就会出现这个错误。</span></span><br><span class="line"><span class="comment">#于是</span></span><br><span class="line">yum install openssl</span><br></pre></td></tr></table></figure>

<ul>
<li>安装好了openssl, 命令openssl也有正常输出，但是设置prefix时仍然报错<code>-with-openssl was given but OpenSSL could not be detected</code></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#根据下面这篇文章</span></span><br><span class="line">yum -y install openssl-devel</span><br></pre></td></tr></table></figure>

<p><a href="https://blog.csdn.net/navida/article/details/48315243?spm=1001.2101.3001.6661.1&utm_medium=distribute.pc_relevant_t0.none-task-blog-2~default~OPENSEARCH~default-1.no_search_link&depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2~default~OPENSEARCH~default-1.no_search_link">configure: error: –with-ssl&#x3D;openssl was given, but SSL is not available._舟自横的博客-CSDN博客</a></p>
<p>然后就没遇到问题了，开始编译与安装make&amp;&amp;make install，再执行curl –version, 正常输出版本，安装成功。</p>
<h3 id="git"><a href="#git" class="headerlink" title="git"></a>git</h3><p><a href="https://zhuanlan.zhihu.com/p/452605751#:~:text=linux%E4%B8%8B%E5%AE%89%E8%A3%85git%201%201.%E4%B8%8B%E8%BD%BDgit%20%E5%9C%A8%20Git%20-%20Downloads%20%28git-scm.com%29,3%203.%E9%AA%8C%E8%AF%81%E7%89%88%E6%9C%AC%20git%20--version%204%204.make%E7%BC%96%E8%AF%91%E6%97%B6%E5%87%BA%E7%8E%B0%E7%9A%84%E9%97%AE%E9%A2%98%20%E9%97%AE%E9%A2%981%EF%BC%9A%20">linux下安装git - 知乎 (zhihu.com)</a></p>
<p>教程整体没什么问题，只是最后向&#x2F;ect&#x2F;profile 内添加内容的部分有些晦涩</p>
<p>如果是刚装好的linux，则末尾添加以下两句就可以了</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> GIT_HOME=/usr/local/git</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$GIT_HOME</span>/bin:</span><br></pre></td></tr></table></figure>

<p><code># source /etc/profile</code> 执行这句命令刷新资源依赖后，尝试git –version验证，确实正常出现了版本号。</p>
<p>但换个终端又出问题了，又无法正常启动，不过好在重启了一下虚拟机，又好了。应该是资源依赖的刷新只停留在执行命令的终端。</p>
<p>尝试连接github</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">#生成ssh钥</span><br><span class="line">ssh-keygen</span><br><span class="line">#控制台输出：</span><br><span class="line">#<span class="title class_">Your</span> public key has been saved <span class="keyword">in</span> /root/.<span class="property">ssh</span>/id_rsa.<span class="property">pub</span></span><br><span class="line">#于是输入命令</span><br><span class="line">vim /root/.<span class="property">ssh</span>/id_rsa.<span class="property">pub</span></span><br><span class="line">#复制文件里的内容，粘贴到github添加ssh钥位置</span><br><span class="line">#输入命令，检测连接情况</span><br><span class="line">ssh -T git@github.<span class="property">com</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>使用ssh代理加速github</title>
    <url>/post/forAll/speedgit/</url>
    <content><![CDATA[<h1 id="使用ssh代理加速github"><a href="#使用ssh代理加速github" class="headerlink" title="使用ssh代理加速github"></a>使用ssh代理加速github</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote>
<p>💡 <strong>背景</strong>：在公司摸鱼时偷偷整了个小项目存在github上，回到寝室兴高采烈地打开自己的小破笔记本准备接着完善项目, 但看着全局代理情况下git clone 27kb &#x2F; s 的龟速，我血压一下子就上来了，于是去学了以下如何提速。（请注意：本方法需要科学上网）</p>
</blockquote>
<blockquote>
<p>本方法学自：<a href="https://zhuanlan.zhihu.com/p/481574024">设置代理解决github被墙 - 知乎 (zhihu.com)</a>,  但该文章中还存有一些可能导致困惑的地方，我将在本篇文章中尽量避免</p>
</blockquote>
<hr>
<h2 id="使用ssh代理加速github的步骤"><a href="#使用ssh代理加速github的步骤" class="headerlink" title="使用ssh代理加速github的步骤"></a>使用ssh代理加速github的步骤</h2><h3 id="1-确认自己梯子的本地代理端口号"><a href="#1-确认自己梯子的本地代理端口号" class="headerlink" title="1. 确认自己梯子的本地代理端口号"></a>1. 确认自己梯子的本地代理端口号</h3><p>以我使用的vray为例，红色箭头所指的为梯子的三个端口号，其中，33612是与代理服务器进行连接的端口，而socks 与 http 是本地的端口号，也是我们接下来需要使用到的端口。</p>
<p><img src="https://img-blog.csdnimg.cn/05fb991394904388a68ef53b06cf8727.png#pic_center" alt="Untitled"></p>
<h3 id="2-确认自己Git连接执行文件的文件路径"><a href="#2-确认自己Git连接执行文件的文件路径" class="headerlink" title="2.确认自己Git连接执行文件的文件路径"></a>2.确认自己Git连接执行文件的文件路径</h3><p>Git 的连接执行文件是connect.exe</p>
<p>所在的路径一般为: <code>git的安装目录\mingw64\bin\connect</code></p>
<p>我将git安装在E盘的App目录中，该路径就为 <code>E:\App\Git\mingw64\bin\connect</code></p>
<p><img src="https://img-blog.csdnimg.cn/382c55b0fad84b13a3986172e4814184.png#pic_center" alt="Untitled"></p>
<h3 id="3-修改ssh的配置"><a href="#3-修改ssh的配置" class="headerlink" title="3.修改ssh的配置"></a>3.修改ssh的配置</h3><p>进入你的.ssh目录，路径一般为 <code>C:\User\你使用的用户名\.ssh</code>， 在这个目录下新建一个config文件（无后缀），将以下内容写入该文件中。 </p>
<p>其中：</p>
<p><strong>路径1：</strong> 第二步中确定的路径，如我使用的：<code>E:\APP\Git\mingw64\bin\connect</code></p>
<p><strong>端口：</strong> 第一步中确认的两个端口中的任意一个，如我使用的为socks端口，<strong>10808</strong></p>
<p><strong>路径2：</strong>.ssh目录中以id_为前缀的文件的路径，如我的.ssh中该文件名称为id_ed25519, 则我的路径2为 <code>C:\Users\我使用的用户名\.ssh\id_ed25519</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#Windows用户，注意替换你的端口号和connect.exe的路径</span><br><span class="line">ProxyCommand &quot;路径1&quot; -S 127.0.0.1:端口 -a none %h %p</span><br><span class="line"></span><br><span class="line">#MacOS用户用下方这条命令，注意替换你的端口号</span><br><span class="line">#ProxyCommand nc -v -x 127.0.0.1:端口 %h %p</span><br><span class="line"></span><br><span class="line">Host github.com</span><br><span class="line">  User git</span><br><span class="line">  Port 22</span><br><span class="line">  Hostname github.com</span><br><span class="line">  # 注意修改路径为你的路径</span><br><span class="line">  IdentityFile &quot;路径2&quot;</span><br><span class="line">  TCPKeepAlive yes</span><br><span class="line"></span><br><span class="line">Host ssh.github.com</span><br><span class="line">  User git</span><br><span class="line">  Port 443</span><br><span class="line">  Hostname ssh.github.com</span><br><span class="line">  # 注意修改路径为你的路径</span><br><span class="line">  IdentityFile &quot;路径2&quot;</span><br><span class="line">  TCPKeepAlive yes</span><br></pre></td></tr></table></figure>

<h3 id="4-验证"><a href="#4-验证" class="headerlink" title="4.验证"></a>4.验证</h3><p>win+r 并输入cmd 进入控制台， 输入<code>ssh -T git@github.com</code> ，回车，查看结果。返回successful之类的就意味着成功了。</p>
<p><img src="https://img-blog.csdnimg.cn/97e936ef9bc74634808a2ed171339fb6.png#pic_center" alt="速度变成了4MB每秒"></p>
<p>速度变成了4MB每秒</p>
]]></content>
      <categories>
        <category>综合</category>
      </categories>
      <tags>
        <tag>git</tag>
        <tag>加速</tag>
      </tags>
  </entry>
  <entry>
    <title>vscode配置vim&amp;&amp;vim的快捷键</title>
    <url>/post/forAll/vim-in-vscode/</url>
    <content><![CDATA[<h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><p>💡 在组长的推荐下尝试了一把vim，一开始点进<a href="https://www.runoob.com/linux/linux-vim.html">Linux vi&#x2F;vim | 菜鸟教程 (runoob.com)</a>入门时，看着键盘图看得头皮发麻，各种快捷键用的速度还不如鼠标老老实实一下一下点击，但用了两个星期以后大呼过瘾，甚至觉得这个教程里快捷键有些不够，便去找了一下官方文档，</p>
<h2 id="vscode配置vim："><a href="#vscode配置vim：" class="headerlink" title="vscode配置vim："></a>vscode配置vim：</h2><p>配置过程分两步</p>
<p>1.在vscode的插件市场中下载vim插件</p>
<p><img src="https://img-blog.csdnimg.cn/2e8a3c545a224c0d83be4d3bda485c85.png#pic_center" alt="Untitled"></p>
<p>2.在头部导航栏中点击文件，按 文件&#x2F;首选项&#x2F;设置 的顺序来到设置页，然后拖动滚动条跑到页面最底部，点击 ‘在settings.json中编辑’</p>
<p>3.在settings.json最外部的{}中的最后一个元素后加上以下代码，然后保存，则完成配置，可以使用了。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;vim.easymotion&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;vim.incsearch&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;vim.useSystemClipboard&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;vim.useCtrlKeys&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;vim.hlsearch&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;vim.insertModeKeyBindings&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;before&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;j&quot;</span><span class="punctuation">,</span> <span class="string">&quot;j&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;after&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;&lt;Esc&gt;&quot;</span><span class="punctuation">]</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;vim.normalModeKeyBindingsNonRecursive&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;before&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;&lt;leader&gt;&quot;</span><span class="punctuation">,</span> <span class="string">&quot;d&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;after&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;d&quot;</span><span class="punctuation">,</span> <span class="string">&quot;d&quot;</span><span class="punctuation">]</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;before&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;&lt;C-n&gt;&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;commands&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;:nohl&quot;</span><span class="punctuation">]</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;before&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;K&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;commands&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;lineBreakInsert&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;silent&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;vim.leader&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&lt;space&gt;&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;vim.handleKeys&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;&lt;C-a&gt;&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;&lt;C-f&gt;&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;&lt;C-c&gt;&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;vue.splitEditors.layout.left&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">        <span class="string">&quot;script&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;scriptSetup&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;styles&quot;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br></pre></td></tr></table></figure>

<h2 id="vim快捷键"><a href="#vim快捷键" class="headerlink" title="vim快捷键"></a>vim快捷键</h2><p>以下内容为<a href="https://www.runoob.com/linux/linux-vim.html">Linux vi&#x2F;vim | 菜鸟教程 (runoob.com)</a>没有讲到，而我看官方文档后觉得比较常用的快捷键。新手入门还请先从菜鸟教程学习基础。</p>
<p><strong>标记与跳转</strong></p>
<table>
<thead>
<tr>
<th>快捷键</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>m{a-zA-Z}</td>
<td>mark current position with mark {a-zA-Z}</td>
</tr>
<tr>
<td>&#96;{a-z}</td>
<td>go to mark {a-z} within current file</td>
</tr>
<tr>
<td>‘.</td>
<td>go to the position of the last change in this file</td>
</tr>
<tr>
<td>‘“</td>
<td>go to the position when last editing this file</td>
</tr>
<tr>
<td>:marks</td>
<td>print the active marks</td>
</tr>
<tr>
<td>🔢 %</td>
<td>goto line N percentage down in the file; N must be given, otherwise it is the % command</td>
</tr>
</tbody></table>
<p><strong>查找</strong></p>
<table>
<thead>
<tr>
<th>快捷键</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>*</td>
<td>search forward for the identifier under the cursor</td>
</tr>
<tr>
<td>g*</td>
<td>like “*”, but also find partial matches</td>
</tr>
<tr>
<td>gd</td>
<td>goto local declaration of identifier under the cursor</td>
</tr>
<tr>
<td>gD</td>
<td>goto global declaration of identifier under the cursor</td>
</tr>
</tbody></table>
<p><strong>光标移动</strong></p>
<table>
<thead>
<tr>
<th>快捷键</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>%</td>
<td>find the next brace, bracket, comment, or “#if”&#x2F; “#else”&#x2F;“#endif” in this line and go to its match</td>
</tr>
<tr>
<td>‘&gt;</td>
<td>go to the end of the (previous) Visual area</td>
</tr>
<tr>
<td>‘&lt;</td>
<td>go to the start of the (previous) Visual area</td>
</tr>
<tr>
<td>f{char}</td>
<td>to the Nth occurrence of {char} to the right</td>
</tr>
<tr>
<td>F{char}</td>
<td>to the Nth occurrence of {char} to the left</td>
</tr>
<tr>
<td>t{char}</td>
<td>till before the Nth occurrence of {char} to the right</td>
</tr>
<tr>
<td>T{char}</td>
<td>till before the Nth occurrence of {char} to the left</td>
</tr>
</tbody></table>
<p><strong>普通模式的插入</strong></p>
<table>
<thead>
<tr>
<th>快捷键</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>K</td>
<td>上方插入一空行而不进入输入模式</td>
</tr>
<tr>
<td>cc</td>
<td>删除该行至行首且切换为输入模式</td>
</tr>
</tbody></table>
<p><strong>控制滚动条</strong></p>
<table>
<thead>
<tr>
<th>快捷键</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>🔢 CTRL-E</td>
<td>window N lines downwards (default: 1)</td>
</tr>
<tr>
<td>🔢 CTRL-Y</td>
<td>window N lines upwards (default: 1)</td>
</tr>
<tr>
<td>🔢 CTRL-D</td>
<td>window N lines Downwards (default: 1&#x2F;2 window)</td>
</tr>
<tr>
<td>🔢 CTRL-U</td>
<td>window N lines Upwards (default: 1&#x2F;2 window)</td>
</tr>
<tr>
<td>zt</td>
<td>redraw, current line at top of window</td>
</tr>
<tr>
<td>z. or zz</td>
<td>redraw, current line at center of window</td>
</tr>
<tr>
<td>zb</td>
<td>redraw, current line at bottom of window</td>
</tr>
<tr>
<td>🔢 zh</td>
<td>scroll screen N characters to the right</td>
</tr>
<tr>
<td>🔢 zl</td>
<td>scroll screen N characters to the left</td>
</tr>
<tr>
<td>🔢 zH</td>
<td>scroll screen half a screenwidth to the right</td>
</tr>
<tr>
<td>🔢 zL</td>
<td>scroll screen half a screenwidth to the left</td>
</tr>
</tbody></table>
<p><strong>视图模式（ CTRL-V ）命令</strong></p>
<table>
<thead>
<tr>
<th>快捷键</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>aw</td>
<td>Select a word(不包括符号)</td>
</tr>
<tr>
<td>aW</td>
<td>Select a word(包括符号)</td>
</tr>
<tr>
<td>ap</td>
<td>Select “a paragraph”(上下两个空行之间，)</td>
</tr>
<tr>
<td>a[]&lt;&gt;’’{}””</td>
<td>选择对应的一整个块</td>
</tr>
<tr>
<td>i[]&lt;&gt;’’{}””</td>
<td>选择块中的内容</td>
</tr>
<tr>
<td>at</td>
<td>Select “a tag block”</td>
</tr>
<tr>
<td>it</td>
<td>Select “inner tag block” (from <aaa> to </aaa>)</td>
</tr>
<tr>
<td>I</td>
<td>insert the same text in front of all the selected lines</td>
</tr>
<tr>
<td>A</td>
<td>append the same text after all the selected lines</td>
</tr>
<tr>
<td>c</td>
<td>Change each of the selected lines with the entered text</td>
</tr>
</tbody></table>
<p><strong>插入模式（ii）命令</strong></p>
<table>
<thead>
<tr>
<th>快捷键</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>CTRL-W</td>
<td>delete word before the cursor</td>
</tr>
<tr>
<td>CTRL-E</td>
<td>insert the character from below the cursor</td>
</tr>
<tr>
<td>CTRL-Y</td>
<td>insert the character from above the cursor</td>
</tr>
<tr>
<td>CTRL-A</td>
<td>inser previously inserted text</td>
</tr>
<tr>
<td>CTRL-@</td>
<td>insert previously inserted text and stop Insert mode</td>
</tr>
<tr>
<td>CTRL-U</td>
<td>delete all entered characters in the current line before the cursor</td>
</tr>
</tbody></table>
<p><strong>普通模式的命令</strong></p>
<table>
<thead>
<tr>
<th>快捷键</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>q{a-Z}</td>
<td>record typed characters into register {a-z}</td>
</tr>
<tr>
<td>q</td>
<td>stop recording</td>
</tr>
<tr>
<td>🔢 @{a-z}</td>
<td>execute the contents of register {a-z} (N times)</td>
</tr>
<tr>
<td>🔢 @@</td>
<td>repeat previous @{a-z} (N times)</td>
</tr>
<tr>
<td>“{char}</td>
<td>use register {char} for the next delete, yank, or put</td>
</tr>
<tr>
<td>“*</td>
<td>use register * to access system clipboard</td>
</tr>
<tr>
<td>:reg</td>
<td>show the contents of all registers</td>
</tr>
<tr>
<td>:reg {arg}</td>
<td>show the contents of registers mentioned in {arg}</td>
</tr>
</tbody></table>
<p><strong>基本命令</strong></p>
<table>
<thead>
<tr>
<th>快捷键</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>gp</td>
<td>like p, but leave cursor after the new text</td>
</tr>
<tr>
<td>🔢 CTRL-A</td>
<td>add N to the number at or after the cursor</td>
</tr>
<tr>
<td>🔢 CTRL-X</td>
<td>subtract N from the number at or after the cursor</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>综合</category>
      </categories>
      <tags>
        <tag>vim</tag>
        <tag>VScode</tag>
      </tags>
  </entry>
  <entry>
    <title>VeeValidate表单验证</title>
    <url>/post/fontEnd/VeeValidate/</url>
    <content><![CDATA[<blockquote>
<p>前言：element-ui 的表单用起来实在是太僵硬了，组长便让我去看一看VeeValidate的表单验证系统，粗略看了一下官方文档，确实要灵活好用很多，便在此记录一下用法</p>
</blockquote>
<h1 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h1><ul>
<li>无需使用v-model将input与变量绑定（但想的话也可以），而是使用v-bind与对应的field绑定。最后直接通过form的value读取。</li>
</ul>
<p>💡 导入<br><code>npm install --save vee-validate@next</code><br><code>import &#123; Form, Field, ErrorMessage &#125; from &#39;vee-validate&#39;;</code></p>
<p>官方文档：<a href="https://vee-validate.logaretm.com/v4/">VeeValidate: Painless Vue.js forms (logaretm.com)</a></p>
<h1 id="基础用法示例"><a href="#基础用法示例" class="headerlink" title="基础用法示例"></a><strong>基础用法示例</strong></h1><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; <span class="title class_">Form</span>, <span class="title class_">Field</span>, <span class="title class_">ErrorMessage</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;vee-validate&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="title function_">validateEmail</span> = (<span class="params">value: any</span>) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">	<span class="keyword">return</span> <span class="regexp">/@/</span>.<span class="title function_">test</span>(value) ? <span class="literal">true</span> : <span class="string">&#x27;邮箱格式错误&#x27;</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="title function_">isRequired</span>=(<span class="params">value:string</span>)=&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">if</span> (value &amp;&amp; value.<span class="title function_">trim</span>()) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> <span class="literal">true</span>;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">return</span> <span class="string">&#x27;你没通过捏&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="title function_">onSubmit</span> = (<span class="params">values</span>) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">	<span class="comment">//values是一个对象，存有填好的表单的值，key是元素的name。</span></span></span><br><span class="line"><span class="language-javascript">	<span class="variable language_">console</span>.<span class="title function_">log</span>(values)</span></span><br><span class="line"><span class="language-javascript">	<span class="title function_">alert</span>(<span class="string">&#x27;验证通过时执行&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- &lt;Form&gt;包裹整个表单，&lt;Field&gt;包裹表单中的一个字段 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- @submit在所有Field都返回true时才触发 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">Form</span> @<span class="attr">submit</span>=<span class="string">&quot;onSubmit&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">Field</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">:rules</span>=<span class="string">&quot;isRequired&quot;</span> <span class="attr">:validate-on-input</span>=<span class="string">&quot;true&quot;</span> #<span class="attr">default</span>=<span class="string">&quot;&#123; errorMessage, field &#125;&quot;</span>&gt;</span></span><br><span class="line">			<span class="comment">&lt;!-- field来自&lt;Field&gt;的v-slot, 意味着值的绑定与事件的绑定。在数据不方便双向绑定，如file时，或想自己配置绑定事件时不使用v-bind写法，具体请看官方文档 --&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">input</span> <span class="attr">v-bind</span>=<span class="string">&quot;field&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> /&gt;</span></span><br><span class="line">			<span class="comment">&lt;!-- errMessage即为校验失败后显示的信息 --&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; errorMessage &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">Field</span>&gt;</span></span><br><span class="line">		</span><br><span class="line">		<span class="comment">&lt;!-- onsubmit会监听内部每一个button的点击，点击时触发内部所有Field的验证 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">button</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">button</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">Form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="使用自定义输入框"><a href="#使用自定义输入框" class="headerlink" title="使用自定义输入框"></a><strong>使用自定义输入框</strong></h1><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Form</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">Field</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">:rules</span>=<span class="string">&quot;&#123; email: true &#125;&quot;</span>  #<span class="attr">default</span>=<span class="string">&quot;&#123; errorMessage, value &#125;&quot;</span>&gt;</span></span><br><span class="line">		//自定义组件推荐使用update:modelValue事件实现与Field的绑定</span><br><span class="line">		<span class="tag">&lt;<span class="name">CustomInput</span> <span class="attr">:modelValue</span>=<span class="string">&quot;value&quot;</span> @<span class="attr">update:modelValue</span>=<span class="string">&quot;handleChange&quot;</span> /&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">Field</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="验证规则绑定"><a href="#验证规则绑定" class="headerlink" title="验证规则绑定"></a><strong>验证规则绑定</strong></h1><h2 id="声明验证规则"><a href="#声明验证规则" class="headerlink" title="声明验证规则"></a>声明验证规则</h2><p>验证规则有两种，一是直接使用函数，还有一种叫validator(个人感觉和函数区别也不大)</p>
<h3 id="使用函数"><a href="#使用函数" class="headerlink" title="使用函数"></a>使用函数</h3><p>声明一个函数，返回值是 bool或string 。return true 时errormessage为空， return false则errormessage为默认值， return string 则将该string赋值给errormessage。</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">isRequired</span> = (<span class="params">value</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (value &amp;&amp; value.<span class="title function_">trim</span>()) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&#x27;This is required&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>之后使用:rules绑定</p>
<p><code>&lt;Field name=&quot;field&quot; :rules=&quot;isRequired&quot; /&gt;</code></p>
<h3 id="使用validator"><a href="#使用validator" class="headerlink" title="使用validator"></a>使用validator</h3><p>声明一个validator, 类似函数</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineRule &#125; <span class="keyword">from</span> <span class="string">&#x27;vee-validate&#x27;</span>;</span><br><span class="line"><span class="title function_">defineRule</span>(<span class="string">&#x27;required&#x27;</span>, <span class="function">(<span class="params">value :string</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (!value || !value.<span class="property">length</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;This field is required&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//需要参数的validator</span></span><br><span class="line"><span class="title function_">defineRule</span>(<span class="string">&#x27;minLength&#x27;</span>, <span class="function">(<span class="params">value, [limit]</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// The field is empty so it should pass</span></span><br><span class="line">  <span class="keyword">if</span> (!value || !value.<span class="property">length</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (value.<span class="property">length</span> &lt; limit) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`This field must be at least <span class="subst">$&#123;limit&#125;</span> characters`</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="title function_">defineRule</span>(<span class="string">&#x27;minMax&#x27;</span>, <span class="function">(<span class="params">value, [min, max]</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// The field is empty so it should pass</span></span><br><span class="line">  <span class="keyword">if</span> (!value || !value.<span class="property">length</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (value.<span class="property">length</span> &lt; min) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`This field must be at least <span class="subst">$&#123;min&#125;</span> characters`</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (value.<span class="property">length</span> &gt; max) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`This field must be at most <span class="subst">$&#123;max&#125;</span> characters`</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>而后用:rules绑定</p>
<p><code>绑定单个&lt;Field name=&quot;username3&quot; :rules=&quot;&#39;resquired&#39;&quot; &gt;</code></p>
<p><code>绑定多个&lt;Field name=&quot;username3&quot; :rules=&quot;&#39;resquired|email&#39;&quot; &gt;</code></p>
<p><code>绑定带参数的validator &lt;Field name=&quot;username3&quot; :rules=&quot;&#39;resquired|minLength:8&#39;&quot; &gt;</code></p>
<p><code>绑定带多个参数的validator &lt;Field name=&quot;username3&quot; :rules=&quot;&#39;minMax:5,8|resquired&#39;&quot; &gt;</code></p>
<h2 id="绑定规则"><a href="#绑定规则" class="headerlink" title="绑定规则"></a>绑定规则</h2><p>除每个field单独绑定外，还可定义一个schema控制所有rules后通过name分配rule</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;!-- 给<span class="title class_">Form</span>绑定schema --&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">Form</span> @<span class="attr">submit</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">:validation-schema</span>=<span class="string">&quot;schema&quot;</span> <span class="attr">v-slot</span>=<span class="string">&quot;&#123; errors &#125;&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">Field</span> <span class="attr">name</span>=<span class="string">&quot;email&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; errors.email &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">Field</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; errors.password &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>Submit<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">Form</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> &#123; <span class="title class_">Form</span>, <span class="title class_">Field</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;vee-validate&#x27;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">const</span> schema = &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">email</span>: <span class="string">&#x27;required|email&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">password</span>: <span class="string">&#x27;required|minLength:8&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<h1 id="验证时机的设置"><a href="#验证时机的设置" class="headerlink" title="验证时机的设置"></a><strong>验证时机的设置</strong></h1><h2 id="单一Field验证："><a href="#单一Field验证：" class="headerlink" title="单一Field验证："></a>单一Field验证：</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Field</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">:rules</span>=<span class="string">&quot;&#123; email: true &#125;&quot;</span> <span class="attr">:validateOnInput</span>=<span class="string">&quot;true&quot;</span> #<span class="attr">default</span>=<span class="string">&quot;&#123; errorMessage, field &#125;&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">v-bind</span>=<span class="string">&quot;field&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; errorMessage &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Field</span>&gt;</span></span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>与时机有关的prop</th>
<th>默认值</th>
<th>介绍</th>
</tr>
</thead>
<tbody><tr>
<td>validateOnMount</td>
<td>false</td>
<td></td>
</tr>
<tr>
<td>validateOnInput</td>
<td>false</td>
<td></td>
</tr>
<tr>
<td>validateOnChange</td>
<td>true</td>
<td></td>
</tr>
<tr>
<td>validateOnBlur</td>
<td>true</td>
<td></td>
</tr>
<tr>
<td>validateOnModelUpdate</td>
<td>true</td>
<td></td>
</tr>
<tr>
<td>bails</td>
<td>true</td>
<td>绑定多个验证规则时，有一个验证规则未通过，直接结束验证，而不再继续验证其他规则</td>
</tr>
</tbody></table>
<h2 id="全表验证："><a href="#全表验证：" class="headerlink" title="全表验证："></a>全表验证：</h2><p>除最后的提交之外，可能还有其他地方也需要进行全表验证，VeeValidate为此提供了validate模块</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 导入validate模块 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">Form</span> @<span class="attr">submit</span>=<span class="string">&quot;onSubmit&quot;</span> #<span class="attr">default</span>=<span class="string">&quot;&#123; validate &#125;&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">Field</span> <span class="attr">name</span>=<span class="string">&quot;username1&quot;</span> <span class="attr">:rules</span>=<span class="string">&quot;isRequired&quot;</span> #<span class="attr">default</span>=<span class="string">&quot;&#123; errorMessage, field&#125;&quot;</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">input</span> <span class="attr">v-bind</span>=<span class="string">&quot;field&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> /&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; errorMessage &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">Field</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">Field</span> <span class="attr">name</span>=<span class="string">&quot;username2&quot;</span> <span class="attr">:rules</span>=<span class="string">&quot;isRequired&quot;</span>  #<span class="attr">default</span>=<span class="string">&quot;&#123; errorMessage, field &#125;&quot;</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">input</span> <span class="attr">v-bind</span>=<span class="string">&quot;field&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> /&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; errorMessage &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">Field</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 使用validate模块 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> @<span class="attr">click</span>=<span class="string">&quot;validate()&quot;</span>&gt;</span>11111<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">Form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="状态管理（trigger）"><a href="#状态管理（trigger）" class="headerlink" title="状态管理（trigger）"></a>状态管理（trigger）</h1><h2 id="Form"><a href="#Form" class="headerlink" title="Form"></a>Form</h2><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;!-- 验证状态管理 --&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">Form</span> @<span class="attr">submit</span>=<span class="string">&quot;onSubmit&quot;</span> #<span class="attr">default</span>=<span class="string">&quot;&#123; meta &#125;&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">	<span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123; meta &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">Form</span>&gt;</span></span></span><br><span class="line"><span class="comment">//渲染结果&#123; &quot;initialValues&quot;: &#123;&#125;, &quot;touched&quot;: false, &quot;pending&quot;: false, &quot;valid&quot;: false, &quot;dirty&quot;: false &#125;</span></span><br><span class="line">meta.<span class="property">value</span>.<span class="property">initialValues</span>; <span class="comment">//一个对象，包含所有字段的初始值，key是字段的name</span></span><br><span class="line">meta.<span class="property">value</span>.<span class="property">touched</span>;<span class="comment">//是否有字段被focus过，并且已经blur</span></span><br><span class="line">meta.<span class="property">value</span>.<span class="property">pending</span>; <span class="comment">//是否有字段还在验证中</span></span><br><span class="line">meta.<span class="property">value</span>.<span class="property">valid</span>; <span class="comment">//是否全部通过验证</span></span><br><span class="line">meta.<span class="property">value</span>.<span class="property">dirty</span>; <span class="comment">//是否有字段更新</span></span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 提交状态管理 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- isSubmitting在提交时值为true，提交完成后值变为false --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">v-form</span> <span class="attr">:validation-schema</span>=<span class="string">&quot;schema&quot;</span> @<span class="attr">submit</span>=<span class="string">&quot;onSubmit&quot;</span> <span class="attr">v-slot</span>=<span class="string">&quot;&#123; isSubmitting &#125;&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="Field"><a href="#Field" class="headerlink" title="Field"></a>Field</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Field</span> <span class="attr">name</span>=<span class="string">&quot;email&quot;</span> <span class="attr">type</span>=<span class="string">&quot;email&quot;</span> <span class="attr">:rules</span>=<span class="string">&quot;validateEmail&quot;</span> <span class="attr">v-slot</span>=<span class="string">&quot;&#123; field, meta &#125;&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-bind</span>=<span class="string">&quot;field&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">pre</span>&gt;</span>&#123;&#123; meta &#125;&#125;<span class="tag">&lt;/<span class="name">pre</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--渲染出的结果为&#123; &quot;touched&quot;: true, &quot;pending&quot;: false, &quot;valid&quot;: false, &quot;validated&quot;: false, &quot;dirty&quot;: true &#125;--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Field</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="表单的提交"><a href="#表单的提交" class="headerlink" title="表单的提交"></a>表单的提交</h1><blockquote>
<p>You will rarely need to access the form values inside the template, but it is there if you ever need it. What’s interesting is that vee-validate follows the assumption that most likely you will need the form values at the submission phase.<br>您很少需要在提交这一步骤之外使用表单值，基于这个假设，vee-validate只在提交阶段提供表单值。但如果您有需要，请额外使用v-model绑定你想要的元素</p>
</blockquote>
<p>⬆️源自VeeValidate官方文档</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; <span class="title class_">Form</span>, <span class="title class_">Field</span>, <span class="title class_">ErrorMessage</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;vee-validate&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//values为表单内部的值，是一个对象，key为field的name</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="title function_">onSubmit</span> = (<span class="params">values</span>) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">	<span class="variable language_">console</span>.<span class="title function_">log</span>(values);</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//value为用户填入的值，results存有验证是否通过的信息，errors为错误信息</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="title function_">onInvalidSubmit</span>=(<span class="params">&#123;values, errors, results&#125;</span>)=&gt;&#123;</span></span><br><span class="line"><span class="language-javascript">	<span class="variable language_">console</span>.<span class="title function_">log</span>(values);</span></span><br><span class="line"><span class="language-javascript">	<span class="variable language_">console</span>.<span class="title function_">log</span>(errors);</span></span><br><span class="line"><span class="language-javascript">	<span class="variable language_">console</span>.<span class="title function_">log</span>(results);</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="title function_">isRequired</span>=(<span class="params">value:string</span>)=&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">if</span> (value &amp;&amp; value.<span class="title function_">trim</span>()) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> <span class="literal">true</span>;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">return</span> <span class="string">&#x27;你没通过捏&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 在所有验证都通过时触发submit事件，其handler默认带表单值为参数。有验证不通过时触发invalid</span></span><br><span class="line"><span class="comment">Submit事件 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">Form</span> @<span class="attr">submit</span>=<span class="string">&quot;onSubmit&quot;</span> @<span class="attr">invalid-submit</span>=<span class="string">&quot;onInvalidSubmit&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">Field</span> <span class="attr">name</span>=<span class="string">&quot;username1&quot;</span> <span class="attr">:rules</span>=<span class="string">&quot;isRequired&quot;</span> #<span class="attr">default</span>=<span class="string">&quot;&#123; field&#125;&quot;</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">input</span> <span class="attr">v-bind</span>=<span class="string">&quot;field&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">Field</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">Field</span> <span class="attr">name</span>=<span class="string">&quot;username2&quot;</span> <span class="attr">:rules</span>=<span class="string">&quot;isRequired&quot;</span>  #<span class="attr">default</span>=<span class="string">&quot;&#123; errorMessage, field &#125;&quot;</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">input</span> <span class="attr">v-bind</span>=<span class="string">&quot;field&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> /&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; errorMessage &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">Field</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- Form自动监听其间button的点击事件，点击则对所有field进行验证 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">button</span>&gt;</span>一个按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">Form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="杂项"><a href="#杂项" class="headerlink" title="杂项"></a>杂项</h1><h2 id="绑定初始值"><a href="#绑定初始值" class="headerlink" title="绑定初始值"></a>绑定初始值</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 仍可以使用v-model来绑定初始值 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span> <span class="attr">setup</span>&gt;</span><span class="language-handlebars"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">...</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="comment">&lt;!-- 定义初始值 --&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">const formValues =&#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">	username1:&#x27;test1&#x27;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">	username2:&#x27;test2&#x27;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">&#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"></span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 给Form绑定initialValues --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">Form</span> @<span class="attr">submit</span>=<span class="string">&quot;onSubmit&quot;</span> <span class="attr">:initialValues</span>=<span class="string">&quot;formValues&quot;</span> &gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">Field</span> <span class="attr">name</span>=<span class="string">&quot;username1&quot;</span> <span class="attr">:rules</span>=<span class="string">&quot;isRequired&quot;</span> #<span class="attr">default</span>=<span class="string">&quot;&#123; errorMessage, field&#125;&quot;</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">input</span> <span class="attr">v-bind</span>=<span class="string">&quot;field&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> /&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; errorMessage &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">Field</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">Field</span> <span class="attr">name</span>=<span class="string">&quot;username2&quot;</span> <span class="attr">:rules</span>=<span class="string">&quot;isRequired&quot;</span>  #<span class="attr">default</span>=<span class="string">&quot;&#123; errorMessage, field &#125;&quot;</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">input</span> <span class="attr">v-bind</span>=<span class="string">&quot;field&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> /&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; errorMessage &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">Field</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">button</span>&gt;</span>1212<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">Form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="错误信息的显示"><a href="#错误信息的显示" class="headerlink" title="错误信息的显示"></a>错误信息的显示</h2><p><code>&lt;*ErrorMessage* *name*=&quot;field&quot; *as*=&quot;div&quot; /&gt;</code></p>
<p>可以通过修改as的值，将错误信息改为自定义组件</p>
<h2 id="更改值"><a href="#更改值" class="headerlink" title="更改值"></a>更改值</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 行内函数更改 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Form</span> <span class="attr">v-slot</span>=<span class="string">&quot;&#123; setFieldValue, setValues &#125;&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Field</span> <span class="attr">name</span>=<span class="string">&quot;email&quot;</span>  /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ErrorMessage</span> <span class="attr">name</span>=<span class="string">&quot;email&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Field</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>  /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ErrorMessage</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;setFieldValue(&#x27;email&#x27;, &#x27;test&#x27;)&quot;</span>&gt;</span>Set Field Value<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;setValues(&#123; email: &#x27;test&#x27;, password: &#x27;test12&#x27; &#125;)&quot;</span>&gt;</span></span><br><span class="line">    Set Multiple Values</span><br><span class="line">  <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- js中使用 ----------------------------------------------------------------------&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span> <span class="attr">setup</span>&gt;</span><span class="language-handlebars"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">...</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">const numval = ref(5)</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="comment">&lt;!--获取ref--&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">const myForm = ref()</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="comment">&lt;!-- 更改一个值 --&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">function changevalue()&#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">	myForm.value.setFieldValue(&#x27;username1&#x27;,numval.value++)</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">&#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="comment">&lt;!-- 更改多个值 --&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">function changevalues()&#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">	myForm.value.setValues(</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">		&#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">			username1: 1,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">			username2: 2</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">		&#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">	)</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">&#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"></span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 获取ref --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">Form</span> @<span class="attr">submit</span>=<span class="string">&quot;onSubmit&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;myForm&quot;</span> &gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">Field</span> <span class="attr">name</span>=<span class="string">&quot;username1&quot;</span> #<span class="attr">default</span>=<span class="string">&quot;&#123; errorMessage, field&#125;&quot;</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">input</span> <span class="attr">v-bind</span>=<span class="string">&quot;field&quot;</span> <span class="attr">type</span>=<span class="string">&quot;number&quot;</span> /&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; errorMessage &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">Field</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">Field</span> <span class="attr">name</span>=<span class="string">&quot;username2&quot;</span>  #<span class="attr">default</span>=<span class="string">&quot;&#123; errorMessage, field &#125;&quot;</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">input</span> <span class="attr">v-bind</span>=<span class="string">&quot;field&quot;</span> <span class="attr">type</span>=<span class="string">&quot;number&quot;</span> /&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; errorMessage &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">Field</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> @<span class="attr">click</span>=<span class="string">&quot;changevalue&quot;</span>&gt;</span>111<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> @<span class="attr">click</span>=<span class="string">&quot;changevalues&quot;</span>&gt;</span>222<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">Form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id=""><a href="#" class="headerlink" title=""></a></h2>]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>-表单验证</tag>
      </tags>
  </entry>
  <entry>
    <title>前端工程化</title>
    <url>/post/fontEnd/factorlizeFont/</url>
    <content><![CDATA[<h1 id="规范化git-commit提交的message"><a href="#规范化git-commit提交的message" class="headerlink" title="规范化git commit提交的message"></a>规范化git commit提交的message</h1><blockquote>
<p>由于各种各样的原因，无论是团队合作还是个人项目，commit历史中总会夹杂着各种简短而不知所谓的message, 不太方便维护，为了缓解这一问题，前端可以使用commitizen包重新调整commit的流程，并实现message的规范化</p>
</blockquote>
<p>1.安装相关包 </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g commitizen</span><br><span class="line">npm install -D cz-git</span><br></pre></td></tr></table></figure>

<p>2.在package.json中添加config项, 并在scripts中添加一项</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;cmt&quot;</span><span class="punctuation">:</span> <span class="string">&quot;git-cz&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;config&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;commitizen&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;node_modules/cz-git&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>3.于项目根目录创建文件.commitlintrc.js（如果package.json中的type项值为module的话，文件后缀改为.cjs）</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// .commitlintrc.js</span></span><br><span class="line"><span class="comment">/** <span class="doctag">@type</span> &#123;<span class="type">import(&#x27;cz-git&#x27;).UserConfig</span>&#125; */</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">rules</span>: &#123;</span><br><span class="line">        <span class="comment">// @see: https://commitlint.js.org/#/reference-rules</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">prompt</span>: &#123;</span><br><span class="line">        <span class="attr">alias</span>: &#123; <span class="attr">fd</span>: <span class="string">&quot;docs: fix typos&quot;</span> &#125;,</span><br><span class="line">        <span class="attr">messages</span>: &#123;</span><br><span class="line">            <span class="attr">type</span>: <span class="string">&quot;选择你要提交的类型 :&quot;</span>,</span><br><span class="line">            <span class="attr">scope</span>: <span class="string">&quot;选择一个提交范围（可选）:&quot;</span>,</span><br><span class="line">            <span class="attr">customScope</span>: <span class="string">&quot;请输入自定义的提交范围 :&quot;</span>,</span><br><span class="line">            <span class="attr">subject</span>: <span class="string">&quot;填写简短精炼的变更描述 :\n&quot;</span>,</span><br><span class="line">            <span class="attr">body</span>: <span class="string">&#x27;填写更加详细的变更描述（可选）。使用 &quot;|&quot; 换行 :\n&#x27;</span>,</span><br><span class="line">            <span class="attr">breaking</span>: <span class="string">&#x27;列举非兼容性重大的变更（可选）。使用 &quot;|&quot; 换行 :\n&#x27;</span>,</span><br><span class="line">            <span class="attr">footerPrefixesSelect</span>: <span class="string">&quot;选择关联issue前缀（可选）:&quot;</span>,</span><br><span class="line">            <span class="attr">customFooterPrefix</span>: <span class="string">&quot;输入自定义issue前缀 :&quot;</span>,</span><br><span class="line">            <span class="attr">footer</span>: <span class="string">&quot;列举关联issue (可选) 例如: #31, #I3244 :\n&quot;</span>,</span><br><span class="line">            <span class="attr">confirmCommit</span>: <span class="string">&quot;是否提交或修改commit ?&quot;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">types</span>: [</span><br><span class="line">		        &#123; <span class="attr">value</span>: <span class="string">&quot;新增功能✨&quot;</span>, <span class="attr">name</span>: <span class="string">&quot;新增功能:✨     例如增加了一个新的页面、组件、接口&quot;</span> &#125;,</span><br><span class="line">            &#123; <span class="attr">value</span>: <span class="string">&quot;修复缺陷🪲&quot;</span>, <span class="attr">name</span>: <span class="string">&quot;修复缺陷:🪲      例如修复了一个崩溃，逻辑错误，样式问题。&quot;</span> &#125;,</span><br><span class="line">            &#123; <span class="attr">value</span>: <span class="string">&quot;文档更新📝&quot;</span>, <span class="attr">name</span>: <span class="string">&quot;文档更新:📝     例如添加了注释，修改了README文件，API文档&quot;</span> &#125;,</span><br><span class="line">            &#123; <span class="attr">value</span>: <span class="string">&quot;代码格式💄&quot;</span>, <span class="attr">name</span>: <span class="string">&quot;代码格式:💄     例如调整了缩进，空格，换行，或者括号&quot;</span> &#125;,</span><br><span class="line">            &#123; <span class="attr">value</span>: <span class="string">&quot;代码重构♻️&quot;</span>, <span class="attr">name</span>: <span class="string">&quot;代码重构:♻️      例如提取了函数，合并了两个类，或者移动了文件&quot;</span> &#125;,</span><br><span class="line">            &#123; <span class="attr">value</span>: <span class="string">&quot;性能提升⚡️&quot;</span>, <span class="attr">name</span>: <span class="string">&quot;性能提升:⚡     ️例如减少了内存占用，提高了运行速度，或者减少了网络请求&quot;</span> &#125;,</span><br><span class="line">            &#123; <span class="attr">value</span>: <span class="string">&quot;持续集成🎡&quot;</span>, <span class="attr">name</span>: <span class="string">&quot;持续集成:🎡     例如添加了一个测试用例，修改了一个构建脚本，或者更新了一个依赖库&quot;</span> &#125;,</span><br><span class="line">            &#123; <span class="attr">value</span>: <span class="string">&quot;回退代码🔙&quot;</span>, <span class="attr">name</span>: <span class="string">&quot;回退代码:🔙     撤销了之前的一次或多次提交&quot;</span> &#125;,</span><br><span class="line">            &#123; <span class="attr">value</span>: <span class="string">&quot;其他修改🧹&quot;</span>, <span class="attr">name</span>: <span class="string">&quot;其他修改:🧹     例如修改了一些配置文件，删除了一些无用的代码，或者添加了一些日志。&quot;</span> &#125;,</span><br><span class="line">            &#123; <span class="attr">value</span>: <span class="string">&quot;合并分支🎋&quot;</span>, <span class="attr">name</span>: <span class="string">&quot;合并分支:🎋     合并了两个或多个分支的代码&quot;</span> &#125;,   </span><br><span class="line">				],</span><br><span class="line">        <span class="comment">// 是否使用Emoji</span></span><br><span class="line">        <span class="attr">useEmoji</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">emojiAlign</span>: <span class="string">&quot;center&quot;</span>,</span><br><span class="line">        <span class="attr">useAI</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">aiNumber</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">themeColorCode</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">        <span class="attr">scopes</span>: [],</span><br><span class="line">        <span class="attr">allowCustomScopes</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">allowEmptyScopes</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">customScopesAlign</span>: <span class="string">&quot;bottom&quot;</span>,</span><br><span class="line">        <span class="attr">customScopesAlias</span>: <span class="string">&quot;custom&quot;</span>,</span><br><span class="line">        <span class="attr">emptyScopesAlias</span>: <span class="string">&quot;empty&quot;</span>,</span><br><span class="line">        <span class="attr">upperCaseSubject</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">markBreakingChangeMode</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">allowBreakingChanges</span>: [<span class="string">&quot;feat&quot;</span>, <span class="string">&quot;fix&quot;</span>],</span><br><span class="line">        <span class="attr">breaklineNumber</span>: <span class="number">100</span>,</span><br><span class="line">        <span class="attr">breaklineChar</span>: <span class="string">&quot;|&quot;</span>,</span><br><span class="line">        <span class="attr">skipQuestions</span>: [],</span><br><span class="line">        <span class="attr">issuePrefixes</span>: [</span><br><span class="line">            <span class="comment">// 如果使用 gitee 作为开发管理</span></span><br><span class="line">            &#123; <span class="attr">value</span>: <span class="string">&quot;link&quot;</span>, <span class="attr">name</span>: <span class="string">&quot;link:     链接 ISSUES 进行中&quot;</span> &#125;,</span><br><span class="line">            &#123; <span class="attr">value</span>: <span class="string">&quot;closed&quot;</span>, <span class="attr">name</span>: <span class="string">&quot;closed:   标记 ISSUES 已完成&quot;</span> &#125;,</span><br><span class="line">        ],</span><br><span class="line">        <span class="attr">customIssuePrefixAlign</span>: <span class="string">&quot;top&quot;</span>,</span><br><span class="line">        <span class="attr">emptyIssuePrefixAlias</span>: <span class="string">&quot;skip&quot;</span>,</span><br><span class="line">        <span class="attr">customIssuePrefixAlias</span>: <span class="string">&quot;custom&quot;</span>,</span><br><span class="line">        <span class="attr">allowCustomIssuePrefix</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">allowEmptyIssuePrefix</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">confirmColorize</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">maxHeaderLength</span>: <span class="title class_">Infinity</span>,</span><br><span class="line">        <span class="attr">maxSubjectLength</span>: <span class="title class_">Infinity</span>,</span><br><span class="line">        <span class="attr">minSubjectLength</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="attr">scopeOverrides</span>: <span class="literal">undefined</span>,</span><br><span class="line">        <span class="attr">defaultBody</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">        <span class="attr">defaultIssues</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">        <span class="attr">defaultScope</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">        <span class="attr">defaultSubject</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>之后，将 npm cmt代替git commit使用</p>
<p>效果如图<br><img src="https://img-blog.csdnimg.cn/2de648ce078546c7b1927785959bd030.jpeg#pic_center" alt="终端内容"><br><img src="https://img-blog.csdnimg.cn/b2f710efa8a846ab875c2f3b1cf1f3ad.jpeg#pic_center" alt="github上的显示"></p>
<h1 id="commit时自动检查以及格式化代码"><a href="#commit时自动检查以及格式化代码" class="headerlink" title="commit时自动检查以及格式化代码"></a>commit时自动检查以及格式化代码</h1><blockquote>
<p>在编写代码时可能为了快捷，并没有注意代码的格式，比如缩进、空格等，单人项目还好，对自己的代码风格较为熟悉，可当项目为多人协作开发时，这会导致合作时的不便，因此就有了husky，在commit时自动处理代码</p>
</blockquote>
<blockquote>
<p>husky通过给git添加hook来实现为git添加功能，理论上来说它所能做的远不只自动格式化代码</p>
</blockquote>
<p>1.下载对应的包</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">//一步到位式，向package.json添加scripts，并创建了一个样例hook，并配置了hook的path</span><br><span class="line">	//npm</span><br><span class="line">	npx husky-init &amp;&amp; npm install</span><br><span class="line">	//pnpm</span><br><span class="line">	pnpm dlx husky-init &amp;&amp; pnpm install</span><br><span class="line"></span><br><span class="line">//逐步式</span><br><span class="line">npm install husky --save-dev</span><br><span class="line">npx husky install</span><br><span class="line">npm pkg <span class="built_in">set</span> scripts.prepare=<span class="string">&quot;husky install&quot;</span></span><br></pre></td></tr></table></figure>

<p>1.5(可选)新建hook</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npx husky add filename <span class="string">&quot;命令&quot;</span></span><br><span class="line">//例如npx husky add .husky/pre-commit <span class="string">&quot;npm test&quot;</span></span><br><span class="line">//命令（npm <span class="built_in">test</span>）执行失败时自动中断commit</span><br></pre></td></tr></table></figure>

<p>不难发现，husky的作用只是在git某一个命令执行前&#x2F;中&#x2F;后执行另外一个指定命令。因此实际上除前端以外，后端、或者算法也能够使用husky来规范化团队的git</p>
<p>而我们目前希望它做的是commit前格式化代码，因此我们需要一个将代码格式化的命令</p>
<p>在此，我使用的是Prettier包与lint-staged</p>
<p>Prettier是一个前端的代码格式化包，能够格式化<em>JavaScript · TypeScript · Flow · JSX · JSONCSS · SCSS · LessHTML · Vue · AngularGraphQL · Markdown · YAML。</em>可谓是非常满足前端的需要</p>
<p>而lint-staged是代码检查器，检查代码是否有语法错误，其github主页的about为“🚫💩 — Run linters on git staged files”, 可见该包是用来缓解💩 山构建过程的</p>
<p>2.下载Prettier与lint-staged</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i --save-dev prettier lint-staged</span><br></pre></td></tr></table></figure>

<p>3.项目根目录下创建文件.prettierrc.json 与 .prettierignore。内容空白即可，若需要自定义配置，请参考官方文档 <a href="https://prettier.io/docs/en/install">Install · Prettier</a></p>
<p>4.整合husky、Prettier以及lint-staged</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">//npm</span><br><span class="line">npx husky add .husky/pre-commit <span class="string">&quot;npx lint-staged&quot;</span></span><br><span class="line"></span><br><span class="line">//pnpm</span><br><span class="line">pnpm <span class="built_in">exec</span> husky add .husky/pre-commit <span class="string">&quot;pnpm exec lint-staged&quot;</span></span><br></pre></td></tr></table></figure>

<p>并且在package.json中添加内容</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;lint-staged&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;**/*&quot;</span><span class="punctuation">:</span> <span class="string">&quot;prettier --write --ignore-unknown&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<p>完成！现在git的整个流程如图<br><img src="https://img-blog.csdnimg.cn/7e07847eed60432ab69cdf76e96ca121.png" alt="在这里插入图片描述"></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>工程化</tag>
      </tags>
  </entry>
  <entry>
    <title>前端性能优化</title>
    <url>/post/fontEnd/fontEndImprove/</url>
    <content><![CDATA[<h1 id="防抖"><a href="#防抖" class="headerlink" title="防抖"></a>防抖</h1><p>概念：避免在短时间内重复触发同一个事件</p>
<p>依赖安装<code>npm i lodash</code></p>
<p>导入<code>import _ from &#39;lodash’</code></p>
<p>代码示例：</p>
<figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">//随便定义一个函数：</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">fun</span>= (<span class="params">str</span>)=&gt;&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(str);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//声明一个debounce变量</span></span><br><span class="line"><span class="keyword">const</span> fun1 = _.<span class="title function_">debounce</span>(fun,<span class="number">500</span>)</span><br><span class="line"><span class="comment">//其中，fun是一个函数，在fun1的声明中fun不带参数，此后，就把 fun1当fan用</span></span><br><span class="line"><span class="comment">//如：&lt;button @click=&quot;fun1(&#x27;11111&#x27;)&quot;&gt;&lt;/button&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="axios取消请求"><a href="#axios取消请求" class="headerlink" title="axios取消请求"></a>axios取消请求</h1><p>概念：当用户需频繁发送请求，并且新请求的数据会覆盖旧请求时，应该在新请求发送时取消旧请求</p>
<p>axios仓库页面：<a href="https://github.com/axios/axios#cancellation">axios&#x2F;axios: Promise based HTTP client for the browser and node.js (github.com)</a>，取消为Cancellation部分</p>
<p>底层原理挺复杂的（原理讲解见<a href="https://zhuanlan.zhihu.com/p/432732779#:~:text=%2F%2F%20Axios%2Flib%2Fadapters%2Fxhr.js%20%2F%2F...%20if%20%28config.cancelToken%20%7C%7C%20config.signal%29%20%7B,%3F%20onCanceled%28%29%20%3A%20config.signal.addEventListener%28%27abort%27%2C%20onCanceled%29%3B%20%7D%20%7D%20%2F%2F">这次终于弄懂Axios是如何中断请求了</a>），但实际用起来很简单。只需new 一个AbortController实例后，在要取消请求时调用这个实例的abort方法即可。</p>
<p>代码示例：</p>
<figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">//请求控制器</span></span><br><span class="line"><span class="keyword">const</span> controller = <span class="title function_">ref</span>(<span class="keyword">new</span> <span class="title class_">AbortController</span>())</span><br><span class="line"></span><br><span class="line"><span class="comment">//关联搜索框</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">handleInputList</span> = (<span class="params">val</span>) =&gt; &#123;</span><br><span class="line">		<span class="comment">//取消旧请求</span></span><br><span class="line">    controller.<span class="property">value</span>.<span class="title function_">abort</span>()</span><br><span class="line">		<span class="comment">//创建新控制器</span></span><br><span class="line">    controller.<span class="property">value</span> = <span class="keyword">new</span> <span class="title class_">AbortController</span>()</span><br><span class="line">		<span class="comment">//getMatchJobLists是一个封装了的axios方法,将controller.value.signal作为参数传入</span></span><br><span class="line">    <span class="title function_">getMatchJobLists</span>(&#123; <span class="attr">job</span>: val, <span class="attr">isSearch</span>: <span class="number">1</span> &#125;, controller.<span class="property">value</span>.<span class="property">signal</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">        isInputSearchArr.<span class="property">value</span> = []</span><br><span class="line">        <span class="keyword">let</span> industry = <span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="keyword">let</span> direction = <span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> (res.<span class="property">code</span> === <span class="number">200</span>) &#123;</span><br><span class="line">            res.<span class="property">data</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (item.<span class="property">industry</span>) &#123;</span><br><span class="line">                    industry = item.<span class="property">industry</span></span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                item.<span class="property">direction</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item2</span>) =&gt;</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (item2.<span class="property">direction</span>) &#123;</span><br><span class="line">                        direction = item2.<span class="property">direction</span></span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    item2.<span class="property">jobs</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item3</span>) =&gt;</span> &#123;</span><br><span class="line">                        isInputSearchArr.<span class="property">value</span>.<span class="title function_">push</span>(&#123;</span><br><span class="line">                            <span class="attr">id</span>: item3.<span class="property">id</span>,</span><br><span class="line">                            <span class="attr">name</span>: item3.<span class="property">name</span>,</span><br><span class="line">                            industry,</span><br><span class="line">                            direction,</span><br><span class="line">                        &#125;)</span><br><span class="line">                    &#125;)</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>该示例是一个类似浏览器的搜索下拉框，用户每次输入后都向服务器请求用户搜索的内容 ，用户打字较快的话，会在短时间内进行多次请求，而其中只有最后一次请求的结果有意义，因此可以通过取消之前的请求来提升性能。</p>
<p>代码段中的getMatchJobLists是一个封装了的axios方法，其定义如下：</p>
<figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> getMatchJobLists = (<span class="attr">params</span>: <span class="built_in">any</span>, <span class="attr">signal</span>: <span class="title class_">GenericAbortSignal</span>): <span class="function"><span class="params">any</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">request</span>(&#123;</span><br><span class="line">        <span class="attr">url</span>: <span class="string">`/match_job_lists`</span>,</span><br><span class="line">        <span class="attr">method</span>: <span class="string">&quot;get&quot;</span>,</span><br><span class="line">        signal,</span><br><span class="line">        params,</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>性能</tag>
      </tags>
  </entry>
</search>
